{
    "acados_include_path": "/home/dolev/acados-install/include",
    "acados_lib_path": "/home/dolev/acados-install/lib",
    "code_export_directory": "/home/dolev/Desktop/Research/OMPL_drones/acados_system/c_generated_code",
    "constraints": {
        "C": [],
        "C_e": [],
        "D": [],
        "constr_type": "BGH",
        "constr_type_0": "BGH",
        "constr_type_e": "BGH",
        "has_x0": true,
        "idxbu": [],
        "idxbx": [],
        "idxbx_0": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23
        ],
        "idxbx_e": [],
        "idxbxe_0": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23
        ],
        "idxsbu": [],
        "idxsbx": [],
        "idxsbx_e": [],
        "idxsg": [],
        "idxsg_e": [],
        "idxsh": [],
        "idxsh_0": [],
        "idxsh_e": [],
        "idxsphi": [],
        "idxsphi_0": [],
        "idxsphi_e": [],
        "lbu": [],
        "lbx": [],
        "lbx_0": [
            -1.110007,
            2.024559,
            0.003428697,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "lbx_e": [],
        "lg": [],
        "lg_e": [],
        "lh": [],
        "lh_0": [],
        "lh_e": [],
        "lphi": [],
        "lphi_0": [],
        "lphi_e": [],
        "lsbu": [],
        "lsbx": [],
        "lsbx_e": [],
        "lsg": [],
        "lsg_e": [],
        "lsh": [],
        "lsh_0": [],
        "lsh_e": [],
        "lsphi": [],
        "lsphi_0": [],
        "lsphi_e": [],
        "ubu": [],
        "ubx": [],
        "ubx_0": [
            -1.110007,
            2.024559,
            0.003428697,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        "ubx_e": [],
        "ug": [],
        "ug_e": [],
        "uh": [],
        "uh_0": [],
        "uh_e": [],
        "uphi": [],
        "uphi_0": [],
        "uphi_e": [],
        "usbu": [],
        "usbx": [],
        "usbx_e": [],
        "usg": [],
        "usg_e": [],
        "ush": [],
        "ush_0": [],
        "ush_e": [],
        "usphi": [],
        "usphi_0": [],
        "usphi_e": []
    },
    "cost": {
        "Vu": [],
        "Vu_0": [],
        "Vx": [],
        "Vx_0": [],
        "Vx_e": [],
        "Vz": [],
        "Vz_0": [],
        "W": [
            [
                10.0,
                0.0,
                0.0
            ],
            [
                0.0,
                10.0,
                0.0
            ],
            [
                0.0,
                0.0,
                10.0
            ]
        ],
        "W_0": [
            [
                10.0,
                0.0,
                0.0
            ],
            [
                0.0,
                10.0,
                0.0
            ],
            [
                0.0,
                0.0,
                10.0
            ]
        ],
        "W_e": [
            [
                0.0,
                0.0,
                0.0
            ],
            [
                0.0,
                0.0,
                0.0
            ],
            [
                0.0,
                0.0,
                0.0
            ]
        ],
        "Zl": [],
        "Zl_0": [],
        "Zl_e": [],
        "Zu": [],
        "Zu_0": [],
        "Zu_e": [],
        "cost_ext_fun_type": "casadi",
        "cost_ext_fun_type_0": "casadi",
        "cost_ext_fun_type_e": "casadi",
        "cost_function_ext_cost": null,
        "cost_function_ext_cost_0": null,
        "cost_function_ext_cost_e": null,
        "cost_source_ext_cost": null,
        "cost_source_ext_cost_0": null,
        "cost_source_ext_cost_e": null,
        "cost_type": "NONLINEAR_LS",
        "cost_type_0": "NONLINEAR_LS",
        "cost_type_e": "NONLINEAR_LS",
        "yref": [
            0.0,
            0.0,
            0.0
        ],
        "yref_0": [
            0.0,
            0.0,
            0.0
        ],
        "yref_e": [
            0.0,
            0.0,
            0.0
        ],
        "zl": [],
        "zl_0": [],
        "zl_e": [],
        "zu": [],
        "zu_0": [],
        "zu_e": []
    },
    "cython_include_dirs": [
        "/home/dolev/.local/lib/python3.10/site-packages/numpy/core/include",
        "/usr/include/python3.10"
    ],
    "dims": {
        "N": 200,
        "n_global_data": 0,
        "nbu": 0,
        "nbx": 0,
        "nbx_0": 24,
        "nbx_e": 0,
        "nbxe_0": 24,
        "ng": 0,
        "ng_e": 0,
        "nh": 0,
        "nh_0": 0,
        "nh_e": 0,
        "np": 0,
        "np_global": 0,
        "nphi": 0,
        "nphi_0": 0,
        "nphi_e": 0,
        "nr": 0,
        "nr_0": 0,
        "nr_e": 0,
        "ns": 0,
        "ns_0": 0,
        "ns_e": 0,
        "nsbu": 0,
        "nsbx": 0,
        "nsbx_e": 0,
        "nsg": 0,
        "nsg_e": 0,
        "nsh": 0,
        "nsh_0": 0,
        "nsh_e": 0,
        "nsphi": 0,
        "nsphi_0": 0,
        "nsphi_e": 0,
        "nu": 4,
        "nx": 24,
        "nx_next": 24,
        "ny": 3,
        "ny_0": 3,
        "ny_e": 3,
        "nz": 0
    },
    "external_function_files_model": [
        "payload_accel_model/payload_accel_expl_ode_fun.c",
        "payload_accel_model/payload_accel_expl_vde_forw.c",
        "payload_accel_model/payload_accel_expl_vde_adj.c"
    ],
    "external_function_files_ocp": [
        "payload_accel_cost/payload_accel_cost_y_0_fun.c",
        "payload_accel_cost/payload_accel_cost_y_0_fun_jac_ut_xt.c",
        "payload_accel_cost/payload_accel_cost_y_0_hess.c",
        "payload_accel_cost/payload_accel_cost_y_fun.c",
        "payload_accel_cost/payload_accel_cost_y_fun_jac_ut_xt.c",
        "payload_accel_cost/payload_accel_cost_y_hess.c",
        "payload_accel_cost/payload_accel_cost_y_e_fun.c",
        "payload_accel_cost/payload_accel_cost_y_e_fun_jac_ut_xt.c",
        "payload_accel_cost/payload_accel_cost_y_e_hess.c"
    ],
    "json_file": "planner_accel.json",
    "model": {
        "con_h_expr": [],
        "con_h_expr_0": [],
        "con_h_expr_e": [],
        "con_phi_expr": [],
        "con_phi_expr_0": [],
        "con_phi_expr_e": [],
        "con_r_expr": [],
        "con_r_expr_0": [],
        "con_r_expr_e": [],
        "con_r_in_phi": [],
        "con_r_in_phi_0": [],
        "con_r_in_phi_e": [],
        "cost_conl_custom_outer_hess": [],
        "cost_conl_custom_outer_hess_0": [],
        "cost_conl_custom_outer_hess_e": [],
        "cost_expr_ext_cost": [],
        "cost_expr_ext_cost_0": [],
        "cost_expr_ext_cost_custom_hess": [],
        "cost_expr_ext_cost_custom_hess_0": [],
        "cost_expr_ext_cost_custom_hess_e": [],
        "cost_expr_ext_cost_e": [],
        "cost_psi_expr": [],
        "cost_psi_expr_0": [],
        "cost_psi_expr_e": [],
        "cost_r_in_psi_expr": [],
        "cost_r_in_psi_expr_0": [],
        "cost_r_in_psi_expr_e": [],
        "cost_y_expr": "@1=vertcat((sin(theta_0)*cos(phi_0)), (sin(theta_0)*sin(phi_0)), cos(theta_0)), ((([0, 0, -19.6133]+(mac(([0, 0, -2.45166]+(T_0*mac(horzcat(horzcat((1-(2.*(sq(qy_0)+sq(qz_0)))), (2.*((qx_0*qy_0)-(qz_0*qw_0))), (2.*((qx_0*qz_0)+(qy_0*qw_0))))', horzcat((2.*((qx_0*qy_0)+(qz_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qz_0)))), (2.*((qy_0*qz_0)-(qx_0*qw_0))))', horzcat((2.*((qx_0*qz_0)-(qy_0*qw_0))), (2.*((qy_0*qz_0)+(qx_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qy_0)))))')',[0, 0, 1],zeros(3x1))))',@1,0)*@1))-(0.1*vertcat(vpx, vpy, vpz)))/2)",
        "cost_y_expr_0": "@1=vertcat((sin(theta_0)*cos(phi_0)), (sin(theta_0)*sin(phi_0)), cos(theta_0)), ((([0, 0, -19.6133]+(mac(([0, 0, -2.45166]+(T_0*mac(horzcat(horzcat((1-(2.*(sq(qy_0)+sq(qz_0)))), (2.*((qx_0*qy_0)-(qz_0*qw_0))), (2.*((qx_0*qz_0)+(qy_0*qw_0))))', horzcat((2.*((qx_0*qy_0)+(qz_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qz_0)))), (2.*((qy_0*qz_0)-(qx_0*qw_0))))', horzcat((2.*((qx_0*qz_0)-(qy_0*qw_0))), (2.*((qy_0*qz_0)+(qx_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qy_0)))))')',[0, 0, 1],zeros(3x1))))',@1,0)*@1))-(0.1*vertcat(vpx, vpy, vpz)))/2)",
        "cost_y_expr_e": "vertcat(px, py, pz, quat_pw, quat_px, quat_py, quat_pz, vpx, vpy, vpz, opx, opy, opz, qw_0, qx_0, qy_0, qz_0, wr_0, wp_0, wy_0, theta_0, phi_0, thetaDot_0, phiDot_0)[7:10]",
        "disc_dyn_expr": [],
        "dyn_disc_fun": null,
        "dyn_disc_fun_jac": null,
        "dyn_disc_fun_jac_hess": null,
        "dyn_ext_fun_type": "casadi",
        "dyn_generic_source": null,
        "dyn_impl_dae_fun": null,
        "dyn_impl_dae_fun_jac": null,
        "dyn_impl_dae_jac": null,
        "f_expl_expr": "@1=([0, 0, -2.45166]+(T_0*mac(horzcat(horzcat((1-(2.*(sq(qy_0)+sq(qz_0)))), (2.*((qx_0*qy_0)-(qz_0*qw_0))), (2.*((qx_0*qz_0)+(qy_0*qw_0))))', horzcat((2.*((qx_0*qy_0)+(qz_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qz_0)))), (2.*((qy_0*qz_0)-(qx_0*qw_0))))', horzcat((2.*((qx_0*qz_0)-(qy_0*qw_0))), (2.*((qy_0*qz_0)+(qx_0*qw_0))), (1-(2.*(sq(qx_0)+sq(qy_0)))))')',[0, 0, 1],zeros(3x1)))), @2=vertcat((sin(theta_0)*cos(phi_0)), (sin(theta_0)*sin(phi_0)), cos(theta_0)), @3=(mac(@1',@2,0)*@2), @4=mac(horzcat(horzcat((1-(2.*(sq(quat_py)+sq(quat_pz)))), (2.*((quat_px*quat_py)-(quat_pz*quat_pw))), (2.*((quat_px*quat_pz)+(quat_py*quat_pw))))', horzcat((2.*((quat_px*quat_py)+(quat_pz*quat_pw))), (1-(2.*(sq(quat_px)+sq(quat_pz)))), (2.*((quat_py*quat_pz)-(quat_px*quat_pw))))', horzcat((2.*((quat_px*quat_pz)-(quat_py*quat_pw))), (2.*((quat_py*quat_pz)+(quat_px*quat_pw))), (1-(2.*(sq(quat_px)+sq(quat_py)))))')',[0, 0, 0.5],zeros(3x1)), @5=@4[1], @6=@3[2], @7=@4[2], @8=@3[1], @9=@3[0], @10=@4[0], vertcat(vpx, vpy, vpz, (0.5*vertcat((((-(opx*quat_px))-(opy*quat_py))-(opz*quat_pz)), (((opx*quat_pw)+(opy*quat_pz))-(opz*quat_py)), (((opy*quat_pw)-(opx*quat_pz))+(opz*quat_px)), (((opx*quat_py)-(opy*quat_px))+(opz*quat_pw)))), ((([0, 0, -19.6133]+@3)-(0.1*vertcat(vpx, vpy, vpz)))/2), (\n[[0.833333, 0, 0], \n [0, 0.833333, 0], \n [0, 0, 1.33333]]\\vertcat(((@5*@6)-(@7*@8)), ((@7*@9)-(@10*@6)), ((@10*@8)-(@5*@9)))), (0.5*vertcat((((-(wr_0*qx_0))-(wp_0*qy_0))-(wy_0*qz_0)), (((wr_0*qw_0)+(wp_0*qz_0))-(wy_0*qy_0)), (((wp_0*qw_0)-(wr_0*qz_0))+(wy_0*qx_0)), (((wr_0*qy_0)-(wp_0*qx_0))+(wy_0*qw_0)))), (\n[[0.00250833, 0, 0], \n [0, 0.00250833, 0], \n [0, 0, 0.005]]\\(vertcat(taux_0, tauy_0, tauz_0)-(0.01*vertcat(wr_0, wp_0, wy_0)))), thetaDot_0, phiDot_0, (2.*mac(@1',vertcat((cos(theta_0)*cos(phi_0)), (cos(theta_0)*sin(phi_0)), (-sin(theta_0))),0)), (2.*mac(@1',vertcat((-sin(phi_0)), cos(phi_0), 0),0)))",
        "f_impl_expr": [],
        "gnsf_nontrivial_f_LO": 1,
        "gnsf_purely_linear": 0,
        "name": "payload_accel",
        "nu_original": null,
        "p": "0x1",
        "p_global": "0x1",
        "t": [],
        "t0": null,
        "t_label": "t",
        "u": "vertcat(T_0, taux_0, tauy_0, tauz_0)",
        "u_labels": null,
        "x": "vertcat(px, py, pz, quat_pw, quat_px, quat_py, quat_pz, vpx, vpy, vpz, opx, opy, opz, qw_0, qx_0, qy_0, qz_0, wr_0, wp_0, wy_0, theta_0, phi_0, thetaDot_0, phiDot_0)",
        "x_labels": null,
        "xdot": "xdot",
        "z": "0x1"
    },
    "name": "payload_accel",
    "p_global_values": [],
    "parameter_values": [],
    "problem_class": "OCP",
    "shared_lib_ext": ".so",
    "simulink_opts": null,
    "solver_options": {
        "N_horizon": 200,
        "Tsim": 0.01,
        "adaptive_levenberg_marquardt_lam": 5.0,
        "adaptive_levenberg_marquardt_mu0": 0.001,
        "adaptive_levenberg_marquardt_mu_min": 1e-16,
        "allow_direction_mode_switch_to_nominal": true,
        "as_rti_iter": 1,
        "as_rti_level": 4,
        "collocation_type": "GAUSS_LEGENDRE",
        "cost_discretization": "EULER",
        "cost_scaling": [
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            1.0
        ],
        "custom_templates": [],
        "custom_update_copy": true,
        "custom_update_filename": "",
        "custom_update_header_filename": "",
        "eval_residual_at_max_iter": false,
        "exact_hess_constr": 1,
        "exact_hess_cost": 1,
        "exact_hess_dyn": 1,
        "ext_cost_num_hess": 0,
        "ext_fun_compile_flags": "-O2",
        "ext_fun_expand_constr": false,
        "ext_fun_expand_cost": false,
        "ext_fun_expand_dyn": false,
        "ext_fun_expand_precompute": false,
        "fixed_hess": 0,
        "globalization": "FIXED_STEP",
        "globalization_alpha_min": 0.05,
        "globalization_alpha_reduction": 0.7,
        "globalization_eps_sufficient_descent": 0.0001,
        "globalization_fixed_step_length": 1.0,
        "globalization_full_step_dual": 0,
        "globalization_funnel_fraction_switching_condition": 0.001,
        "globalization_funnel_init_increase_factor": 15.0,
        "globalization_funnel_init_upper_bound": 1.0,
        "globalization_funnel_initial_penalty_parameter": 1.0,
        "globalization_funnel_kappa": 0.9,
        "globalization_funnel_sufficient_decrease_factor": 0.9,
        "globalization_funnel_use_merit_fun_only": false,
        "globalization_line_search_use_sufficient_descent": 0,
        "globalization_use_SOC": 0,
        "hessian_approx": "GAUSS_NEWTON",
        "hpipm_mode": "BALANCE",
        "integrator_type": "ERK",
        "levenberg_marquardt": 0.0,
        "log_dual_step_norm": false,
        "log_primal_step_norm": false,
        "model_external_shared_lib_dir": null,
        "model_external_shared_lib_name": null,
        "nlp_solver_ext_qp_res": 0,
        "nlp_solver_max_iter": 100,
        "nlp_solver_tol_comp": 0.001,
        "nlp_solver_tol_eq": 0.001,
        "nlp_solver_tol_ineq": 0.001,
        "nlp_solver_tol_min_step_norm": 0.0,
        "nlp_solver_tol_stat": 0.001,
        "nlp_solver_type": "SQP_RTI",
        "nlp_solver_warm_start_first_qp": false,
        "nlp_solver_warm_start_first_qp_from_nlp": false,
        "num_threads_in_batch_solve": 1,
        "print_level": 0,
        "qp_solver": "PARTIAL_CONDENSING_HPIPM",
        "qp_solver_cond_N": 200,
        "qp_solver_cond_block_size": null,
        "qp_solver_cond_ric_alg": 1,
        "qp_solver_iter_max": 50,
        "qp_solver_mu0": 0.0,
        "qp_solver_ric_alg": 1,
        "qp_solver_t0_init": 2,
        "qp_solver_tol_comp": null,
        "qp_solver_tol_eq": null,
        "qp_solver_tol_ineq": null,
        "qp_solver_tol_stat": null,
        "qp_solver_warm_start": 0,
        "reg_adaptive_eps": false,
        "reg_epsilon": 0.0001,
        "reg_max_cond_block": 10000000.0,
        "reg_min_epsilon": 1e-08,
        "regularize_method": "NO_REGULARIZE",
        "rti_log_only_available_residuals": 0,
        "rti_log_residuals": 0,
        "search_direction_mode": "NOMINAL_QP",
        "shooting_nodes": [
            0.0,
            0.01,
            0.02,
            0.03,
            0.04,
            0.05,
            0.060000000000000005,
            0.07,
            0.08,
            0.09,
            0.09999999999999999,
            0.10999999999999999,
            0.11999999999999998,
            0.12999999999999998,
            0.13999999999999999,
            0.15,
            0.16,
            0.17,
            0.18000000000000002,
            0.19000000000000003,
            0.20000000000000004,
            0.21000000000000005,
            0.22000000000000006,
            0.23000000000000007,
            0.24000000000000007,
            0.25000000000000006,
            0.26000000000000006,
            0.2700000000000001,
            0.2800000000000001,
            0.2900000000000001,
            0.3000000000000001,
            0.3100000000000001,
            0.3200000000000001,
            0.3300000000000001,
            0.34000000000000014,
            0.35000000000000014,
            0.36000000000000015,
            0.37000000000000016,
            0.38000000000000017,
            0.3900000000000002,
            0.4000000000000002,
            0.4100000000000002,
            0.4200000000000002,
            0.4300000000000002,
            0.4400000000000002,
            0.45000000000000023,
            0.46000000000000024,
            0.47000000000000025,
            0.48000000000000026,
            0.49000000000000027,
            0.5000000000000002,
            0.5100000000000002,
            0.5200000000000002,
            0.5300000000000002,
            0.5400000000000003,
            0.5500000000000003,
            0.5600000000000003,
            0.5700000000000003,
            0.5800000000000003,
            0.5900000000000003,
            0.6000000000000003,
            0.6100000000000003,
            0.6200000000000003,
            0.6300000000000003,
            0.6400000000000003,
            0.6500000000000004,
            0.6600000000000004,
            0.6700000000000004,
            0.6800000000000004,
            0.6900000000000004,
            0.7000000000000004,
            0.7100000000000004,
            0.7200000000000004,
            0.7300000000000004,
            0.7400000000000004,
            0.7500000000000004,
            0.7600000000000005,
            0.7700000000000005,
            0.7800000000000005,
            0.7900000000000005,
            0.8000000000000005,
            0.8100000000000005,
            0.8200000000000005,
            0.8300000000000005,
            0.8400000000000005,
            0.8500000000000005,
            0.8600000000000005,
            0.8700000000000006,
            0.8800000000000006,
            0.8900000000000006,
            0.9000000000000006,
            0.9100000000000006,
            0.9200000000000006,
            0.9300000000000006,
            0.9400000000000006,
            0.9500000000000006,
            0.9600000000000006,
            0.9700000000000006,
            0.9800000000000006,
            0.9900000000000007,
            1.0000000000000007,
            1.0100000000000007,
            1.0200000000000007,
            1.0300000000000007,
            1.0400000000000007,
            1.0500000000000007,
            1.0600000000000007,
            1.0700000000000007,
            1.0800000000000007,
            1.0900000000000007,
            1.1000000000000008,
            1.1100000000000008,
            1.1200000000000008,
            1.1300000000000008,
            1.1400000000000008,
            1.1500000000000008,
            1.1600000000000008,
            1.1700000000000008,
            1.1800000000000008,
            1.1900000000000008,
            1.2000000000000008,
            1.2100000000000009,
            1.2200000000000009,
            1.2300000000000009,
            1.2400000000000009,
            1.2500000000000009,
            1.260000000000001,
            1.270000000000001,
            1.280000000000001,
            1.290000000000001,
            1.300000000000001,
            1.310000000000001,
            1.320000000000001,
            1.330000000000001,
            1.340000000000001,
            1.350000000000001,
            1.360000000000001,
            1.370000000000001,
            1.380000000000001,
            1.390000000000001,
            1.400000000000001,
            1.410000000000001,
            1.420000000000001,
            1.430000000000001,
            1.440000000000001,
            1.450000000000001,
            1.460000000000001,
            1.470000000000001,
            1.480000000000001,
            1.490000000000001,
            1.500000000000001,
            1.5100000000000011,
            1.5200000000000011,
            1.5300000000000011,
            1.5400000000000011,
            1.5500000000000012,
            1.5600000000000012,
            1.5700000000000012,
            1.5800000000000012,
            1.5900000000000012,
            1.6000000000000012,
            1.6100000000000012,
            1.6200000000000012,
            1.6300000000000012,
            1.6400000000000012,
            1.6500000000000012,
            1.6600000000000013,
            1.6700000000000013,
            1.6800000000000013,
            1.6900000000000013,
            1.7000000000000013,
            1.7100000000000013,
            1.7200000000000013,
            1.7300000000000013,
            1.7400000000000013,
            1.7500000000000013,
            1.7600000000000013,
            1.7700000000000014,
            1.7800000000000014,
            1.7900000000000014,
            1.8000000000000014,
            1.8100000000000014,
            1.8200000000000014,
            1.8300000000000014,
            1.8400000000000014,
            1.8500000000000014,
            1.8600000000000014,
            1.8700000000000014,
            1.8800000000000014,
            1.8900000000000015,
            1.9000000000000015,
            1.9100000000000015,
            1.9200000000000015,
            1.9300000000000015,
            1.9400000000000015,
            1.9500000000000015,
            1.9600000000000015,
            1.9700000000000015,
            1.9800000000000015,
            1.9900000000000015,
            2.0000000000000013
        ],
        "sim_method_jac_reuse": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "sim_method_newton_iter": 3,
        "sim_method_newton_tol": 0.0,
        "sim_method_num_stages": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "sim_method_num_steps": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "solution_sens_qp_t_lam_min": 1e-09,
        "store_iterates": false,
        "tau_min": 0.0,
        "tf": 2.0,
        "time_steps": [
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01,
            0.01
        ],
        "timeout_heuristic": "LAST",
        "timeout_max_time": 0.0,
        "use_constraint_hessian_in_feas_qp": false,
        "with_adaptive_levenberg_marquardt": false,
        "with_anderson_acceleration": false,
        "with_batch_functionality": false,
        "with_solution_sens_wrt_params": false,
        "with_value_sens_wrt_params": false
    },
    "zoro_description": null
}